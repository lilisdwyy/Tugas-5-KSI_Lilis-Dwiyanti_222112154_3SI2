# -*- coding: utf-8 -*-
"""Tugas 6 KSI_222112154_Transposition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18qIeRo9ctPrmrH7qgRCHOPQ2qMhRSM_5

**ENCRYPT**
"""

from ctypes import c_longlong
def encrypt_transposition(text, key):
    # Menentukan jumlah kolom pada grid
    rows = (len(text) + key - 1) // key
    # inisialisasi grid
    grid = [[' ' for _ in range(key)] for _ in range(rows)]

    # Mengisi grid per baris
    index = 0
    for j in range(key):
        for i in range(rows):
            if index < len(text):
                grid[i][j] = text[index]
                index += 1

    # Encrypt dari grid
    encrypted_text = ''.join(''.join(row) for row in grid)
    return encrypted_text

def decrypt_transposition(text, key):
    # Menentukan jumlah baris pada grid
    rows = (len(text) + key - 1) // key
    # inisialisasi grid
    grid = [[' ' for _ in range(key)] for _ in range(rows)]

    # Mengisi grid per kolom
    index = 0
    for i in range(rows):
        for j in range(key):
            if index < len(text):
                grid[i][j] = text[index]
                index += 1

    # Decrypt dari grid
    decrypted_text = ''.join(''.join(row) for row in zip(*grid))
    return decrypted_text

def main():
    text = input("Masukkan teks yang ingin dienkripsi: ")
    key = int(input("Masukkan kunci untuk enkripsi (hanya dalam bilangan bulat): "))

    # Encrypt the text
    encrypted_text = encrypt_transposition(text, key)
    print("Encrypted text:", encrypted_text)

    # Decrypt the text
    decrypted_text = decrypt_transposition(encrypted_text, key)
    print("Decrypted text:", decrypted_text)

if __name__ == "__main__":
    main()

"""**DECRYPT**"""

from ctypes import c_longlong
def decrypt_transposition(text, key):
    # Menentukan jumlah baris pada grid
    rows = (len(text) + key - 1) // key
    # inisialisasi grid
    grid = [[' ' for _ in range(key)] for _ in range(rows)]

    # Mengisi grid per kolom
    index = 0
    for i in range(rows):
        for j in range(key):
            if index < len(text):
                grid[i][j] = text[index]
                index += 1

    # Decrypt dari grid
    decrypted_text = ''.join(''.join(row) for row in zip(*grid))
    return decrypted_text

def main():
    text = input("Masukkan teks yang ingin didekripsi: ")
    key = int(input("Masukkan kunci untuk enkripsi (hanya dalam bilangan bulat): "))

    # Decrypt the text
    decrypted_text = decrypt_transposition(text, key)
    print("Decrypted text:", decrypted_text)

if __name__ == "__main__":
    main()